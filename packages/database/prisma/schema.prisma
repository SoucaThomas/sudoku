generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Room {
  roomId         String  @id @default(uuid())
  roomName       String
  roomPassword   String?
  roomGame       String
  roomDifficulty String
  isRoomPublic   Boolean

  users User[]

  isPlaying       Boolean
  totalPlayTime   Int
  lastTimeStarted DateTime

  status String

  board   Board?
  boardId String? @unique
}

model User {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  isAnonymous   Boolean? @default(false)
  gamesPlayed   Int?     @default(0)
  totalScore    Int?     @default(0)
  level         Int?     @default(1)
  experiance    Int?     @default(0)
  color         String?  @default("blue")

  room Room[]

  sessions Session[]
  accounts Account[]
}

// model RoomUser {
//   roomId String
//   userId String

//   room Room @relation(fields: [roomId], references: [roomId], onDelete: Cascade)
//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@id([roomId, userId])
// }

model Board {
  boardId String @id @default(uuid())

  serverBoard String
  clientBoard String
  solution    String
  mistakes    Int
  score       Int

  roomId String @unique
  room   Room   @relation(fields: [roomId], references: [roomId], onDelete: Cascade)
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

model Verification {
  id         String    @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
}
